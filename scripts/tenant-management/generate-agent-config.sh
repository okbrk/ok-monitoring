#!/bin/bash
# Generate Grafana Agent configuration from PostgreSQL metrics_endpoints table

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Database connection
DB_HOST=${DB_HOST:-localhost}
DB_PORT=${DB_PORT:-5432}
DB_NAME=${DB_NAME:-tenants}
DB_USER=${DB_USER:-tenants}
DB_PASSWORD=${POSTGRES_PASSWORD}

CONFIG_FILE="config/grafana-agent/config.yaml"

if [ -z "$DB_PASSWORD" ]; then
  echo -e "${RED}Error: POSTGRES_PASSWORD environment variable not set${NC}"
  exit 1
fi

echo -e "${BLUE}Generating Grafana Agent configuration from database...${NC}"

# Query active metrics endpoints with tenant info
QUERY="
SELECT
  me.id,
  me.tenant_id,
  me.endpoint_url,
  me.scrape_interval_seconds,
  t.api_key,
  t.is_active as tenant_active
FROM metrics_endpoints me
JOIN tenants t ON me.tenant_id = t.tenant_id
WHERE me.is_active = true AND t.is_active = true
ORDER BY me.tenant_id, me.id;
"

# Fetch data from database
ENDPOINTS=$(PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -A -F'|' -c "$QUERY" 2>/dev/null)

if [ $? -ne 0 ]; then
  echo -e "${RED}Error: Failed to query database${NC}"
  exit 1
fi

# Start building config file
cat > "$CONFIG_FILE" << 'EOF'
# Grafana Agent configuration for scraping customer Prometheus health check endpoints
# This file is AUTO-GENERATED by scripts/tenant-management/generate-agent-config.sh
# Do not edit manually - changes will be overwritten

server:
  log_level: info
  http_listen_port: 12345

metrics:
  global:
    scrape_interval: 30s
    external_labels:
      platform: obs.okbrk.com

  # Per-customer scrape configurations
  configs:
EOF

# Count endpoints
ENDPOINT_COUNT=0

# Parse and generate config for each endpoint
if [ -n "$ENDPOINTS" ]; then
  while IFS='|' read -r id tenant_id endpoint_url scrape_interval api_key tenant_active; do
    [ -z "$id" ] && continue

    ENDPOINT_COUNT=$((ENDPOINT_COUNT + 1))

    # Parse URL to extract scheme, host, and path
    # Format: https://example.com/api/metrics or http://localhost:8080/metrics
    if [[ $endpoint_url =~ ^(https?)://([^/]+)(/.*)$ ]]; then
      SCHEME="${BASH_REMATCH[1]}"
      HOST="${BASH_REMATCH[2]}"
      PATH="${BASH_REMATCH[3]}"
    else
      echo -e "${YELLOW}Warning: Invalid endpoint URL format for $tenant_id: $endpoint_url${NC}"
      continue
    fi

    # Generate unique config name
    CONFIG_NAME="tenant-${tenant_id}-${id}"
    JOB_NAME="${tenant_id}-metrics-${id}"

    # Append to config file
    cat >> "$CONFIG_FILE" << EOF
    - name: ${CONFIG_NAME}
      scrape_configs:
        - job_name: '${JOB_NAME}'
          scrape_interval: ${scrape_interval}s
          scrape_timeout: $((scrape_interval - 5))s
          scheme: ${SCHEME}
          metrics_path: '${PATH}'
          authorization:
            credentials: '${api_key}'
          static_configs:
            - targets:
                - '${HOST}'
          relabel_configs:
            - target_label: tenant_id
              replacement: ${tenant_id}
            - target_label: endpoint_id
              replacement: '${id}'

      remote_write:
        - url: http://mimir:8080/api/v1/push
          headers:
            X-Scope-OrgID: ${tenant_id}
          queue_config:
            capacity: 10000
            max_shards: 5
            max_samples_per_send: 5000
            batch_send_deadline: 5s

EOF

  done <<< "$ENDPOINTS"
fi

# If no endpoints, add empty list
if [ $ENDPOINT_COUNT -eq 0 ]; then
  echo "    # No active metrics endpoints configured" >> "$CONFIG_FILE"
fi

echo -e "${GREEN}✓ Generated configuration for $ENDPOINT_COUNT endpoint(s)${NC}"
echo -e "${BLUE}Config file: $CONFIG_FILE${NC}"

# Validate YAML syntax if yq is available
if command -v yq &> /dev/null; then
  if yq eval '.' "$CONFIG_FILE" > /dev/null 2>&1; then
    echo -e "${GREEN}✓ YAML syntax valid${NC}"
  else
    echo -e "${RED}✗ YAML syntax error in generated config${NC}"
    exit 1
  fi
fi

echo ""
echo -e "${BLUE}To apply this configuration:${NC}"
echo ""
echo "  # If running locally:"
echo "  docker compose restart grafana-agent"
echo ""
echo "  # If on remote server:"
echo "  scp $CONFIG_FILE ok-obs:/opt/observability/$CONFIG_FILE"
echo "  ssh ok-obs 'cd /opt/observability && docker compose restart grafana-agent'"
echo ""

